# C'est le nom qui s'affiche en clair (Actions/All Workflows)
name: Java CI for TourGuide

# Afin de garantir que tout nouveau code est validé, les tâches suivantes vont se déclencher à chaque push ou pull request sur les branches indiquées.
on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
  # Ajoute un bouton "Run workflow" dans GitHub pour lancer manuellement le pipeline
  workflow_dispatch:
    
# Les différentes tâches à effectuer :
jobs:
  build:
    # Elles sont exécutées dans l'environnement suivant (fourni par GitHub).
    runs-on: ubuntu-latest

    # Les différentes étapes à effectuer :
    steps:
    
        # Récupére le code source du dépôt dans l’environnement.
        - uses: actions/checkout@v4
        
        # Installe et configure Java 17 via Temurin (JDK recommandé).
        # Le cache Maven permet d'accéler le traitement.
        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven

        # Ces 3 librairies n'étant pas disponibles dans le dépôt Maven car externes, on les installe manuellement (sinon compilation impossible).
        - name: Install custom dependencies (gpsUtil, tripPricer, rewardCentral)
          run: |
                mvn install:install-file -Dfile=libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar
                mvn install:install-file -Dfile=libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar
                mvn install:install-file -Dfile=libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar    
                
        # Compilation (séparation par étape préférée au build direct).
        - name: Compile the project
          run: mvn -B compile --file pom.xml

        # Exécution des tests (séparation par étape préférée au build direct).
        - name: Run tests
          run: mvn -B test --file pom.xml        

        # Construction du fichier JAR (build).
        # Le paramètre -DskipTests permet d’éviter une double exécution des tests.
        - name: Build the JAR with Maven.
          run: mvn -B package --file pom.xml -DskipTests
    
        # Préparation du dossier temporaire (staging) pour y mettre le fichier .jar généré.
        - name: Prepare artifact
          run: |
            mkdir staging
            cp target/*.jar staging/
        
        # Le fichier JAR est téléchargeable sur GitHub.
        - name: Upload JAR as GitHub Artifact
          uses: actions/upload-artifact@v4
          with:
            name: tourguide-jar
            path: staging/

        # Pour le suivi des dépendances au niveau de la sécurité.
        # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
        #- name: Update dependency graph
        #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
